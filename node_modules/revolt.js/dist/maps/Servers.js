var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { makeAutoObservable, action, runInAction, computed } from "mobx";
import isEqual from "lodash.isequal";
import { toNullable } from "../util/null";
import { U32_MAX } from "../api/permissions";
import Collection from "./Collection";
import { decodeTime } from "ulid";
export class Server {
    constructor(client, data) {
        this.description = null;
        this.channel_ids = [];
        this.categories = null;
        this.system_messages = null;
        this.roles = null;
        this.icon = null;
        this.banner = null;
        this.nsfw = null;
        this.flags = null;
        this.client = client;
        this._id = data._id;
        this.owner = data.owner;
        this.name = data.name;
        this.description = toNullable(data.description);
        this.channel_ids = data.channels;
        this.categories = toNullable(data.categories);
        this.system_messages = toNullable(data.system_messages);
        this.roles = toNullable(data.roles);
        this.default_permissions = data.default_permissions;
        this.icon = toNullable(data.icon);
        this.banner = toNullable(data.banner);
        this.nsfw = toNullable(data.nsfw);
        this.flags = toNullable(data.flags);
        makeAutoObservable(this, {
            _id: false,
            client: false,
        });
    }
    get channels() {
        return this.channel_ids.map((x) => this.client.channels.get(x));
    }
    /**
     * Get timestamp when this server was created.
     */
    get createdAt() {
        return decodeTime(this._id);
    }
    /**
     * Absolute pathname to this server in the client.
     */
    get path() {
        return `/server/${this._id}`;
    }
    /**
     * Get URL to this server.
     */
    get url() {
        var _a;
        return ((_a = this.client.configuration) === null || _a === void 0 ? void 0 : _a.app) + this.path;
    }
    isUnread(permit) {
        if (permit === null || permit === void 0 ? void 0 : permit.isMuted(this))
            return false;
        return this.channels.find((channel) => !(permit === null || permit === void 0 ? void 0 : permit.isMuted(channel)) && (channel === null || channel === void 0 ? void 0 : channel.unread));
    }
    getMentions(permit) {
        if (permit === null || permit === void 0 ? void 0 : permit.isMuted(this))
            return [];
        const arr = this.channels
            .filter(channel => !(permit === null || permit === void 0 ? void 0 : permit.isMuted(channel)))
            .map((channel) => channel === null || channel === void 0 ? void 0 : channel.mentions);
        return [].concat(...arr);
    }
    update(data, clear) {
        const apply = (key, target) => {
            // This code has been tested.
            if (
            // @ts-expect-error TODO: clean up types here
            typeof data[key] !== "undefined" &&
                // @ts-expect-error TODO: clean up types here
                !isEqual(this[target !== null && target !== void 0 ? target : key], data[key])) {
                // @ts-expect-error TODO: clean up types here
                this[target !== null && target !== void 0 ? target : key] = data[key];
            }
        };
        switch (clear) {
            case "Banner":
                this.banner = null;
                break;
            case "Description":
                this.description = null;
                break;
            case "Icon":
                this.icon = null;
                break;
        }
        apply("owner");
        apply("name");
        apply("description");
        apply("channels", "channel_ids");
        apply("categories");
        apply("system_messages");
        apply("roles");
        apply("default_permissions");
        apply("icon");
        apply("banner");
        apply("nsfw");
        apply("flags");
    }
    /**
     * Create a channel
     * @param data Channel create route data
     * @returns The newly-created channel
     */
    createChannel(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("POST", `/servers/${this._id}/channels`, data);
        });
    }
    /**
     * Edit a server
     * @param data Server editing route data
     */
    edit(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("PATCH", `/servers/${this._id}`, data);
        });
    }
    /**
     * Delete a guild
     */
    delete(avoidReq) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!avoidReq)
                yield this.client.req("DELETE", `/servers/${this._id}`);
            runInAction(() => {
                this.client.servers.delete(this._id);
            });
        });
    }
    /**
     * Mark a server as read
     */
    ack() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("PUT", `/servers/${this._id}/ack`);
        });
    }
    /**
     * Ban user
     * @param user_id User ID
     */
    banUser(user_id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("PUT", `/servers/${this._id}/bans/${user_id}`, data);
        });
    }
    /**
     * Unban user
     * @param user_id User ID
     */
    unbanUser(user_id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("DELETE", `/servers/${this._id}/bans/${user_id}`);
        });
    }
    /**
     * Fetch a server's invites
     * @returns An array of the server's invites
     */
    fetchInvites() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("GET", `/servers/${this._id}/invites`);
        });
    }
    /**
     * Fetch a server's bans
     * @returns An array of the server's bans.
     */
    fetchBans() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("GET", `/servers/${this._id}/bans`);
        });
    }
    /**
     * Set role permissions
     * @param role_id Role Id, set to 'default' to affect all users
     * @param permissions Permission number, removes permission if unset
     */
    setPermissions(role_id = "default", permissions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("PUT", `/servers/${this._id}/permissions/${role_id}`, { permissions });
        });
    }
    /**
     * Create role
     * @param name Role name
     */
    createRole(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("POST", `/servers/${this._id}/roles`, { name });
        });
    }
    /**
     * Edit a role
     * @param role_id Role ID
     * @param data Role editing route data
     */
    editRole(role_id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("PATCH", `/servers/${this._id}/roles/${role_id}`, data);
        });
    }
    /**
     * Delete role
     * @param role_id Role ID
     */
    deleteRole(role_id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.req("DELETE", `/servers/${this._id}/roles/${role_id}`);
        });
    }
    /**
     * Fetch a server member
     * @param user User or User ID
     * @returns Server member object
     */
    fetchMember(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const user_id = typeof user === "string" ? user : user._id;
            const existing = this.client.members.getKey({
                server: this._id,
                user: user_id,
            });
            if (existing)
                return existing;
            const member = yield this.client.req("GET", `/servers/${this._id}/members/${user_id}`);
            return this.client.members.createObj(member);
        });
    }
    /**
     * Optimised member fetch route.
     * ! OPTIMISATION
     */
    syncMembers(skipOffline) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.req("GET", `/servers/${this._id}/members`);
            // ! FIXME: if we do this on the server, we can save 7ms locally
            // 7ms to sort both lists.
            // data.users.sort((a,b)=>b._id.localeCompare(a._id));
            // data.members.sort((a,b)=>b._id.user.localeCompare(a._id.user));
            // This takes roughly 23ms.
            runInAction(() => {
                // This adds roughly 15ms to 23ms above.
                const mapping = {};
                data.members.forEach(x => mapping[x._id.user] = x);
                for (let i = 0; i < data.users.length; i++) {
                    if (data.users[i].online) {
                        const user = data.users[i];
                        this.client.users.createObj(user);
                        this.client.members.createObj(mapping[user._id]);
                    }
                }
            });
            if (skipOffline)
                return;
            let j = 0;
            // Each batch takes between 70 and 90ms.
            const batch = () => {
                const offset = j * 100;
                runInAction(() => {
                    for (let i = offset; i < data.users.length && i < offset + 100; i++) {
                        this.client.users.createObj(data.users[i]);
                        this.client.members.createObj(data.members[i]);
                    }
                });
                if (offset < data.users.length) {
                    j++;
                    setTimeout(batch, 0);
                }
            };
            setTimeout(batch, 0);
        });
    }
    /**
     * Fetch a server's members.
     * @returns An array of the server's members and their user objects.
     */
    fetchMembers() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.req("GET", `/servers/${this._id}/members`);
            // Note: this takes 986 ms (Testers server)
            return runInAction(() => {
                return {
                    members: data.members.map(this.client.members.createObj),
                    users: data.users.map(this.client.users.createObj),
                };
            });
        });
    }
    generateIconURL(...args) {
        var _a;
        return this.client.generateFileURL((_a = this.icon) !== null && _a !== void 0 ? _a : undefined, ...args);
    }
    generateBannerURL(...args) {
        var _a;
        return this.client.generateFileURL((_a = this.banner) !== null && _a !== void 0 ? _a : undefined, ...args);
    }
    get permission() {
        var _a, _b, _c, _d;
        if (this.owner === ((_a = this.client.user) === null || _a === void 0 ? void 0 : _a._id)) {
            return U32_MAX;
        }
        else {
            const member = (_b = this.client.members.getKey({
                user: this.client.user._id,
                server: this._id,
            })) !== null && _b !== void 0 ? _b : { roles: null };
            if (!member)
                return 0;
            let perm = this.default_permissions[0] >>> 0;
            if (member.roles) {
                for (const role of member.roles) {
                    perm |= ((_d = (_c = this.roles) === null || _c === void 0 ? void 0 : _c[role].permissions[0]) !== null && _d !== void 0 ? _d : 0) >>> 0;
                }
            }
            return perm;
        }
    }
}
__decorate([
    computed
], Server.prototype, "isUnread", null);
__decorate([
    computed
], Server.prototype, "getMentions", null);
__decorate([
    action
], Server.prototype, "update", null);
__decorate([
    computed
], Server.prototype, "generateIconURL", null);
__decorate([
    computed
], Server.prototype, "generateBannerURL", null);
__decorate([
    computed
], Server.prototype, "permission", null);
export default class Servers extends Collection {
    constructor(client) {
        super(client);
        this.createObj = this.createObj.bind(this);
    }
    $get(id, data) {
        const server = this.get(id);
        if (data)
            server.update(data);
        return server;
    }
    /**
     * Fetch a server
     * @param id Server ID
     * @returns The server
     */
    fetch(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.has(id))
                return this.$get(id, data);
            const res = data !== null && data !== void 0 ? data : (yield this.client.req("GET", `/servers/${id}`));
            return runInAction(() => __awaiter(this, void 0, void 0, function* () {
                for (const channel of res.channels) {
                    // ! FIXME: add route for fetching all channels
                    // ! FIXME: OR the WHOLE server
                    try {
                        yield this.client.channels.fetch(channel);
                        // future proofing for when not
                    }
                    catch (err) { }
                }
                return this.createObj(res);
            }));
        });
    }
    /**
     * Create a server object.
     * This is meant for internal use only.
     * @param data: Server Data
     * @returns Server
     */
    createObj(data) {
        if (this.has(data._id))
            return this.$get(data._id, data);
        const server = new Server(this.client, data);
        runInAction(() => {
            this.set(data._id, server);
        });
        return server;
    }
    /**
     * Create a server
     * @param data Server create route data
     * @returns The newly-created server
     */
    createServer(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this.client.req("POST", `/servers/create`, data);
            return this.fetch(server._id, server);
        });
    }
}
__decorate([
    action
], Servers.prototype, "$get", null);
