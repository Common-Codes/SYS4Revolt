var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AlwaysDelay } from "./always.delay";
import { getSanitizedOptions } from "../../options";
describe(AlwaysDelay.name, () => {
    let options;
    let delay;
    function initClass() {
        delay = new AlwaysDelay(options);
    }
    beforeEach(() => {
        options = getSanitizedOptions({});
        initClass();
        jest.useFakeTimers();
    });
    it(`when calling #apply, the delay is equal to the starting delay`, () => __awaiter(void 0, void 0, void 0, function* () {
        const spy = jest.fn();
        delay.apply().then(spy);
        jest.runTimersToTime(options.startingDelay);
        yield Promise.resolve();
        expect(spy).toHaveBeenCalledTimes(1);
    }));
    it(`when the attempt number is 1, when calling #apply,
  the delay is equal to the starting delay multiplied by the time multiple`, () => __awaiter(void 0, void 0, void 0, function* () {
        delay.setAttemptNumber(1);
        const spy = jest.fn();
        delay.apply().then(spy);
        jest.runTimersToTime(options.startingDelay * options.timeMultiple);
        yield Promise.resolve();
        expect(spy).toHaveBeenCalledTimes(1);
    }));
    it(`when the attempt number is 2, when calling #apply,
  the delay is equal to the starting delay multiplied by the time multiple raised by the attempt number`, () => __awaiter(void 0, void 0, void 0, function* () {
        const attemptNumber = 2;
        delay.setAttemptNumber(attemptNumber);
        const spy = jest.fn();
        delay.apply().then(spy);
        jest.runTimersToTime(options.startingDelay * Math.pow(options.timeMultiple, attemptNumber));
        yield Promise.resolve();
        expect(spy).toHaveBeenCalledTimes(1);
    }));
    it(`when the #maxDelay is less than #startingDelay, when calling #apply,
  the delay is equal to the #maxDelay`, () => __awaiter(void 0, void 0, void 0, function* () {
        options.maxDelay = options.startingDelay - 1;
        const spy = jest.fn();
        delay.apply().then(spy);
        jest.runTimersToTime(options.maxDelay);
        yield Promise.resolve();
        expect(spy).toHaveBeenCalledTimes(1);
    }));
});
